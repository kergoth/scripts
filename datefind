#!/usr/bin/env bash

set -euo pipefail

usage() {
    cat >&2 <<EOF
Usage: ${0##*/} [-r] [-f DATE_FMT] [-b] [--] [FIND_ARGS..]

List files by date.

Options:
  -r          Reverse the sort order.
  -f DATE_FMT Use DATE_FMT as the output format for the date.
              Default is "%Y-%m-%d %H:%M".
  -b          Use birth date instead of modification date.
  -A          Use added date instead of modification date.
  -h          Show this help message.
EOF
    exit 2
}

reverse=
date_fmt="%Y-%m-%d %H:%M"
birth_date=0
added_date=0
while getopts rf:bAh opt; do
    case "$opt" in
    r)
        reverse=1
        ;;
    f)
        date_fmt="$OPTARG"
        ;;
    b)
        birth_date=1
        ;;
    A)
        added_date=1
        ;;
    \? | h)
        usage
        ;;
    esac
done
shift $((OPTIND - 1))

case "${OSTYPE:-}" in
darwin*)
    MACOS=1
    ;;
*)
    MACOS=0
    if [ $birth_date -eq 1 ]; then
        echo >&2 "Error: -b is not supported for non-macOS systems"
        exit 1
    fi
    if [ $added_date -eq 1 ]; then
        echo >&2 "Error: -A is not supported for non-macOS systems"
        exit 1
    fi
    ;;
esac

find_added() {
    find "$@" |
        while read -r fn; do
            added=$(/usr/bin/mdls -name kMDItemDateAdded -raw "$fn" 2>/dev/null || :)
            if [ -n "$added" ] && [ "$added" != "(null)" ]; then
                added=$(/bin/date -j -f "%Y-%m-%d %H:%M:%S" "${added% *}" "+%s")
            else
                added=$(/usr/bin/stat -f "%b%t%N" "$fn")
            fi
            printf '%s\t%s\n' "$added" "$fn"
        done
}

if [ $# -eq 0 ]; then
    set -- .
fi
set -- "$@" \( -not -name .DS_Store -a -not -name .\* -a -not -wholename \*/.\* -a -not -wholename \*/@eaDir/\* \) -a

if [ $MACOS -eq 1 ]; then
    if [ $added_date -eq 1 ]; then
        find_added "$@"
    else
        if [ $birth_date -eq 1 ]; then
            statfmt="%b%t%N"
        else
            statfmt="%m%t%N"
        fi

        find "$@" -type f -exec /usr/bin/stat -f "$statfmt" \{\} \+
    fi |
        sort ${reverse:+-r} -n |
        if [ "$date_fmt" = "%s" ]; then
            cat
        else
            while read -r d f; do
                printf '%s\t%s\n' "$(/bin/date -j -f "%s" "$d" "+$date_fmt")" "$f"
            done
        fi
else
    find "$@" -type f -printf "${date_fmt//%/%T}"'\t%p\n' |
        sort ${reverse:+-r} -n
fi
