#!/usr/bin/env bash

set -euo pipefail

msg() {
    fmt="$1"
    if [ $# -gt 1 ]; then
        shift
    fi
    # shellcheck disable=SC2059
    printf "$fmt\n" "$@" >&2
}

msg_verbose() {
    if [ "${verbose:-0}" -ge "1" ]; then
        msg "$@"
    fi
}

msg_debug() {
    if [ "${verbose:-0}" -ge "2" ]; then
        msg "$@"
    fi
}

die() {
    msg "$@"
    exit 1
}

has() {
    command -v "$1" >/dev/null 2>&1
}

printcmd() {
    python3 -c 'import subprocess,sys; print(subprocess.list2cmdline(sys.argv[1:]))' "$@"
}

run() {
    if [ "${verbose:-0}" -gt 0 ]; then
        printf '❯ %s\n' "$(printcmd "$@")" >&2
    fi
    if [ -z "${dry_run:-}" ]; then
        "$@"
    fi
}


verbose=1

LIMA_DOCKER_INSTANCE=${LIMA_DOCKER_INSTANCE:-docker}

if ! limactl list --quiet "$LIMA_DOCKER_INSTANCE" &>/dev/null; then
    run limactl create --name="$LIMA_DOCKER_INSTANCE" "$HOME/Projects/lima/$LIMA_DOCKER_INSTANCE.yaml"
    run limactl start "$LIMA_DOCKER_INSTANCE" || die "failed to start $LIMA_DOCKER_INSTANCE VM"
    trap 'run limactl stop -f "$LIMA_DOCKER_INSTANCE"' EXIT INT TERM
elif limactl list --all-fields "$LIMA_DOCKER_INSTANCE" | tail -n +2 | awk '{print $2}' | grep -q Stopped; then
    run limactl start "$LIMA_DOCKER_INSTANCE" || die "failed to start $LIMA_DOCKER_INSTANCE VM"
    trap 'run limactl stop -f "$LIMA_DOCKER_INSTANCE"' EXIT INT TERM
fi

binary="${XDG_DATA_HOME:-$HOME/.local}/bin/decky-linux-binary"
if ! [ -x "$binary" ]; then
    mkdir -p "$(dirname "$binary")"
    curl -fsSL --output "$binary" https://github.com/SteamDeckHomebrew/cli/releases/latest/download/decky-linux-x86_64
    chmod +x "$binary"
fi
if [ "${1:-}" = "plugin" ] && [ "${2:-}" = "build" ]; then
    shift 2
    if [ -d .git ]; then
        run git clean -fqdx -e ./out/ || msg "warning: git clean failed, continuing"
    fi
    if [ -d tmp ]; then
        if command -v trash &>/dev/null; then
            run trash tmp || msg "warning: trash tmp failed, continuing"
        else
            run rm -rf tmp || msg "warning: rm -rf tmp failed, continuing"
        fi
    fi
    mkdir -p tmp
    set -- plugin build --build-as-root --tmp-output-path "$PWD/tmp" --output-path ./out "$@"
fi
run limactl shell "$LIMA_DOCKER_INSTANCE" "$binary" "$@"
run git clean -fqdx -e /out/
if [ "${1:-}" = "plugin" ] && [ "${2:-}" = "build" ] && [ -d ./out ]; then
    output=$(find ./out -mindepth 1 -maxdepth 1 -type f | head -n 1)
    if [ -n "$output" ]; then
        msg "Decky build complete: %s" "$output"
    else
        die "Error: Decky build complete, but nothing found in ./out/"
    fi
fi
